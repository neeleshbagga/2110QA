TF	Interfaces & Abstract Classes	1	Interfaces can be extended?	False	Interfaces are not classes, and therefore cannot be extended. They need to be implemented.
TF 	Interfaces & Abstract Classes	2	A class that implements an interface I must also implement all superinterfaces of I.	True	This follows from the heirarchy.
TF	Interfaces & Abstract Classes	1	Interfaces can be implemented?	True	The keyword 'implements' is use by a class to implement an interface.
TF 	Interfaces & Abstract Classes 	2 	A non-abstract subclass of an abstract class A must implement all methods declared abstract in A?	True 	This is fundamentally how abstract classes work in Java. A non-abstract class extending an abstract class, has to implement all the methods declared as abstract.
TF 	Interfaces & Abstract Classes 	1 	Abstract classes and interfaces cannot be instantiated.	True 	They need to be extended, and implemented respectively.
TF 	Interfaces & Abstract Classes 	2 	In Java, a class may directly inherit from more than one abstract class.	False 	Java does not support multiple inheritance.
TF 	Interfaces & Abstract Classes 	1 	In Java, an interface can extend multiple interfaces. 	True 	This is how interfaces work in Java.
TF 	Interfaces & Abstract Classes 	2 	An abstract class can implement interfaces and can include static methods and constructors. 	True	Any class can implement interfaces, have static methods and constructors.

TF	Types	2	A downcast can change the dynamic type of an object?	False	Up and downcasting merely allow the object to be viewed at compile time as a different static type. When you do a cast, nothing changes - not the dynamic type of the object, and not the static type of the expression.
TF	Types	2	An upcast can change the dynamic type of an object?	False	Up and downcasting merely allow the object to be viewed at compile time as a different static type. When you do a cast, nothing changes - not the dynamic type of the object, and not the static type of the expression.
TF 	Types 	2 	The static type of an expression is determined by whether the variables in it have been declared static?	False	The static type of an expression, is the type of the expression during compile time.
TF 	Types 	1 	The static type of the expression (Integer)x is Integer. 	True 	Casting changes the static type during compile time.
TF 	Types 	1 	Subclasses and subtypes are the same thing? 	False 	Can't compare apples and oranges. Subtypes, apply when we have expressions, and when the dynamic type of the RHS  is a subtype of the static type of the LHS.  
TF 	Types 	3 	If class A inherits from abstract class B, and B implements an interface C, then a cast from an object of type A to an object of type C will always succeed.Example: A a; C c = (C) a; 	True 	Since, the type of class C is a subtype of the type of class A. Casting A to C would change the static type of A to te type of C, which is fine.
TF 	Types 	2 	The statement “String s;” implies that the static type of s is String.	True 	Since we are just declaring a variable, the type associated is the static type. The dynamic type would be the type of the object when it is instantiated.
TF 	Types	3 	If during execution, an expression E is ever evaluated and its value is an object O, then the dynamic type of O is a subtype of the static type of E. 	True 	The best way to understand this using an eg: For example Object a = new Integer (b), should follow the above law to be a valid expression.
TF 	Types 	2 	If classes Cat and Turtle both implement the interface Pet, we can add objects of type Cat and objects of type Turtle to an ArrayList<Pet>. 	True 	Since they share the same supertype this can be done.	


TF 	OOP Concepts	2	A private field can only be accessed by methods in the same class?	True	This follows from declaring a variable 'private' which is an access modifier, and limits the usage of the variable within the same class. Usually provate fields can be accessed using getter methods instead.
TF 	OOP Concepts	2	Java supports multiple inheritance?	False	Java supports single inheritance, and allows you to only extend one parent class.
TF 	OOP Concepts	2	"211".equals(211)?	False	This is a common Java pitfall. "211" is a new string object. The integer 211, is automatically converted to an integer object, and then a comparison is made. The objects are clearly not the same, hence not equal.
TF 	OOP Concepts 	2 	A static field is shared by all objects of the class? 	True 	Declaring a field static ensures that there is only copy of this field per class - this copy is shared by all instances of the class.
TF 	OOP Concepts 	2 	Local variables of a method can be declared static provided the method is declared static?	False 	A static field has only one copy which is shared by all objects of a class. These fields are global in nature. However, variables declared in a method are local to the method (not visible outside), and hence cannot be static.
TF 	OOP Concepts 	1 	The statement “String s;” calls the constructor of class Object. 	False 	The constructor is called only when an object is instantiated using the new keyword.
TF 	OOP Concepts 	2 	The protected modifier signifies that the method or variable can only be accessed from within its class, from within its subclasses, or from within classes in the same package. 	True 	This follows from how the 'protected' access modifier works in Java. It protects a variable from being accessed  by a class outside a package.
TF 	OOP Concepts 	2 	The modifier private signifies that the method or variable can only be accessed from within its class and from within its subclasses.	False 	Private fields/methods can only be accessed within their class.
TF 	OOP Concepts	2 	In the Java class hierarchy, every class (except Object) extends exactly one parent class. 	True	This is because Java supports single inheritance.
TF 	OOP Concepts 	3 	If we execute Integer a, b; a = b = new Integer(7); a = 11; b will still be equal to 7. 	True 	Initially, integer a is just a local variable assigned the value 11. Since "b = new Integer(7)", creates an object and stores the value in a memory ref, modifying a has no effect on b.
TF 	OOP Concepts 	3 	If class Dog includes a class variable “name” and we execute Dog a, b; a = b = new Dog(“Biscuit”); b.name = “Rover”, then a.name will also be changed to “Rover”.	True	In this case, a = b, makes the dog object a point to dog object b. Any changes to b will also reflect in a, because object a points to object b. 	
TF 	OOP Concepts 	3 	If class Dog includes a class variable “name” and we execute Dog a, b; a = b = new Dog(“Biscuit”); b = new Dog(“Rover”); then a.name will also be changed to “Rover”. 	False	What makes the this different from the previous question is that-  when b is instantiated again, a new object (think with a different id) is created, and the variable a points to this new instance. 'a' still points to the old instance

TF 	OOP Concepts	3	Static methods may refer to static class variables but cannot refer to “this” or to dynamic class variables. 	True 	Think about it this way. Since static methods can be accessed by just calling 'classname.staticmethod()', the static method cannot have “this” or to dynamic class variables. We did not need to instantiate the class to call the static method. This call would have initiated the "this" variablles. 
TF 	OOP Concepts 	2 	If a subclass overrides a method, the corresponding method in the parent class will not be executed. 	True 	The type of an object during runtime is its dynamic type. The dynamic type here is the type of the subclass. Hence, the method executed will that which corresponds to the dynamic type.

TF	Recursion	1	Runtime of merge sort is n.log(n)?	True	Merging is done in linear time, and each time we divide n into half the size.

TF	Trees	1	Searching through a balanced binary tree takes log(n) time?	True	A balanced binary tree with n nodes has a depth log(n). Hence the search takes a maximum time of log(n).
TF 	Trees 	2 	Any binary tree of depth 2 has ≤ 7 nodes. 	True 	The maximum no. of nodes is 8, for a completely balanced tree.
TF 	Trees 	2 	If a binary tree contains N nodes and is balanced, its maximum depth will be log(N).	True 	Since, the  max nodes is 2^n, the depth will be log(n)
MCQ	Trees	2	What is the worst case time complexity of searching in a binary tree?	O(n)	A tree which looks like a linked list has O(n) search time.	O(nlog(n) O(n) O(log(n)) O(1)

